/*
 * RecordedDatabaseMakerView.java
 */
package recordeddatabasemaker;

import Player.ClipPlayer;
import Player.GraphPainter;
import Player.SelectedPhrase;
import Player.TextFile;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JSlider;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * The application's main frame.
 */
public class RecordedDatabaseMakerView extends FrameView {

    public RecordedDatabaseMakerView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = RecordedDatabaseMakerApp.getApplication().getMainFrame();
            aboutBox = new RecordedDatabaseMakerAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        RecordedDatabaseMakerApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        graphPanel = new javax.swing.JPanel();
        frameSlider = new javax.swing.JSlider();
        playButton = new javax.swing.JButton();
        finishLabel = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        startSpinner = new javax.swing.JSpinner();
        finishSpinner = new javax.swing.JSpinner();
        audioContentTextArea = new java.awt.TextArea();
        currentPhraseLabel = new javax.swing.JLabel();
        currentPhraseTextField = new javax.swing.JTextField();
        minusButton = new javax.swing.JButton();
        plusButton = new javax.swing.JButton();
        savePhraseButton = new javax.swing.JButton();
        addPhraseTextField = new javax.swing.JTextField();
        addPhraseButton = new javax.swing.JButton();
        savedPhraseScrollPane = new javax.swing.JScrollPane();
        savedPhraseTextArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        openAudioItem = new javax.swing.JMenuItem();
        openTextItem = new javax.swing.JMenuItem();
        saveResultItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(1024, 768));
        mainPanel.setSize(new java.awt.Dimension(1024, 768));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(recordeddatabasemaker.RecordedDatabaseMakerApp.class).getContext().getResourceMap(RecordedDatabaseMakerView.class);
        graphPanel.setBackground(resourceMap.getColor("graphPanel.background")); // NOI18N
        graphPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        graphPanel.setName("graphPanel"); // NOI18N

        org.jdesktop.layout.GroupLayout graphPanelLayout = new org.jdesktop.layout.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1437, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 384, Short.MAX_VALUE)
        );

        frameSlider.setMajorTickSpacing(500);
        frameSlider.setMaximum(10000);
        frameSlider.setMinorTickSpacing(50);
        frameSlider.setPaintLabels(true);
        frameSlider.setPaintTicks(true);
        frameSlider.setSnapToTicks(true);
        frameSlider.setValue(0);
        frameSlider.setEnabled(false);
        frameSlider.setName("frameSlider"); // NOI18N
        frameSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                frameSliderStateChanged(evt);
            }
        });

        playButton.setText(resourceMap.getString("playButton.text")); // NOI18N
        playButton.setEnabled(false);
        playButton.setName("playButton"); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        finishLabel.setText(resourceMap.getString("finishLabel.text")); // NOI18N
        finishLabel.setName("finishLabel"); // NOI18N

        startLabel.setText(resourceMap.getString("startLabel.text")); // NOI18N
        startLabel.setName("startLabel"); // NOI18N

        startSpinner.setEnabled(false);
        startSpinner.setName("startSpinner"); // NOI18N

        finishSpinner.setEnabled(false);
        finishSpinner.setName("finishSpinner"); // NOI18N

        audioContentTextArea.setEditable(false);
        audioContentTextArea.setName("audioContentTextArea"); // NOI18N

        currentPhraseLabel.setText(resourceMap.getString("currentPhraseLabel.text")); // NOI18N
        currentPhraseLabel.setName("currentPhraseLabel"); // NOI18N

        currentPhraseTextField.setEditable(false);
        currentPhraseTextField.setText(resourceMap.getString("currentPhraseTextField.text")); // NOI18N
        currentPhraseTextField.setName("currentPhraseTextField"); // NOI18N

        minusButton.setText(resourceMap.getString("minusButton.text")); // NOI18N
        minusButton.setName("minusButton"); // NOI18N

        plusButton.setText(resourceMap.getString("plusButton.text")); // NOI18N
        plusButton.setName("plusButton"); // NOI18N

        savePhraseButton.setText(resourceMap.getString("savePhraseButton.text")); // NOI18N
        savePhraseButton.setName("savePhraseButton"); // NOI18N

        addPhraseTextField.setText(resourceMap.getString("addPhraseTextField.text")); // NOI18N
        addPhraseTextField.setName("addPhraseTextField"); // NOI18N

        addPhraseButton.setText(resourceMap.getString("addPhraseButton.text")); // NOI18N
        addPhraseButton.setName("addPhraseButton"); // NOI18N

        savedPhraseScrollPane.setName("savedPhraseScrollPane"); // NOI18N

        savedPhraseTextArea.setColumns(20);
        savedPhraseTextArea.setEditable(false);
        savedPhraseTextArea.setRows(5);
        savedPhraseTextArea.setName("savedPhraseTextArea"); // NOI18N
        savedPhraseScrollPane.setViewportView(savedPhraseTextArea);

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(frameSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1441, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(playButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(36, 36, 36)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(finishLabel)
                                    .add(startLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(finishSpinner)
                                    .add(startSpinner, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                                .add(41, 41, 41)
                                .add(currentPhraseLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(currentPhraseTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 296, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(mainPanelLayout.createSequentialGroup()
                                        .add(70, 70, 70)
                                        .add(minusButton)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(plusButton)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(savePhraseButton)
                                .add(27, 27, 27)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(addPhraseButton)
                                    .add(addPhraseTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)))
                            .add(audioContentTextArea, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(savedPhraseScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(graphPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(audioContentTextArea, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                        .add(19, 19, 19)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(startSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(finishSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(currentPhraseTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(currentPhraseLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(plusButton)
                                    .add(minusButton)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(playButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(mainPanelLayout.createSequentialGroup()
                                        .add(8, 8, 8)
                                        .add(startLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(finishLabel)))
                                .add(8, 8, 8))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, mainPanelLayout.createSequentialGroup()
                                        .add(addPhraseTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(addPhraseButton))
                                    .add(savePhraseButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .add(6, 6, 6)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(savedPhraseScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .add(frameSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(graphPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        openAudioItem.setText(resourceMap.getString("openAudioItem.text")); // NOI18N
        openAudioItem.setName("openAudioItem"); // NOI18N
        openAudioItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openAudioItemActionPerformed(evt);
            }
        });
        fileMenu.add(openAudioItem);

        openTextItem.setText(resourceMap.getString("openTextItem.text")); // NOI18N
        openTextItem.setName("openTextItem"); // NOI18N
        openTextItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTextItemActionPerformed(evt);
            }
        });
        fileMenu.add(openTextItem);

        saveResultItem.setText(resourceMap.getString("saveResultItem.text")); // NOI18N
        saveResultItem.setName("saveResultItem"); // NOI18N
        fileMenu.add(saveResultItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(recordeddatabasemaker.RecordedDatabaseMakerApp.class).getContext().getActionMap(RecordedDatabaseMakerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1481, Short.MAX_VALUE)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 1285, Short.MAX_VALUE)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusMessageLabel)
                    .add(statusAnimationLabel)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void openAudioItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openAudioItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Wave files (*.wav)", "wav");
        fileChooser.setFileFilter(filter);
        if (fileChooser.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                clipPlayer = new ClipPlayer(selectedFile);

                graphPainter = new GraphPainter(selectedFile, graphPanel.getWidth(), graphPanel.getHeight());
                graphPanel.add(graphPainter);
                graphPainter.refresh();

                selectedPhrase = new SelectedPhrase(new Dimension(GraphPainter.BORDER_GAP, graphPanel.getHeight()));
                graphPainter.setLayout(new BorderLayout());
                graphPainter.add(selectedPhrase, BorderLayout.WEST);

                playButton.setEnabled(true);
                frameSlider.setEnabled(true);
                frameSlider.setValue(frameSlider.getMinimum());
            } catch (Exception ex) {
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_openAudioItemActionPerformed

    private void frameSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_frameSliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        int value = slider.getValue();
        finishSpinner.setValue(value);
        selectedPhrase.setWidth(graphPainter.getX(value - slider.getMinimum()));
    }//GEN-LAST:event_frameSliderStateChanged

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        clipPlayer.play(frameSlider.getMinimum(), frameSlider.getValue());
    }//GEN-LAST:event_playButtonActionPerformed

    private void openTextItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTextItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files (*.txt)", "txt");
        fileChooser.setFileFilter(filter);
        if (fileChooser.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            TextFile textFile = new TextFile(selectedFile);
            textFile.readAll();
            audioContentTextArea.setText(textFile.getContent());
        }
    }//GEN-LAST:event_openTextItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPhraseButton;
    private javax.swing.JTextField addPhraseTextField;
    private java.awt.TextArea audioContentTextArea;
    private javax.swing.JLabel currentPhraseLabel;
    private javax.swing.JTextField currentPhraseTextField;
    private javax.swing.JLabel finishLabel;
    private javax.swing.JSpinner finishSpinner;
    private javax.swing.JSlider frameSlider;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton minusButton;
    private javax.swing.JMenuItem openAudioItem;
    private javax.swing.JMenuItem openTextItem;
    private javax.swing.JButton playButton;
    private javax.swing.JButton plusButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton savePhraseButton;
    private javax.swing.JMenuItem saveResultItem;
    private javax.swing.JScrollPane savedPhraseScrollPane;
    private javax.swing.JTextArea savedPhraseTextArea;
    private javax.swing.JLabel startLabel;
    private javax.swing.JSpinner startSpinner;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
    private GraphPainter graphPainter;
    private ClipPlayer clipPlayer;
    private SelectedPhrase selectedPhrase;
}
